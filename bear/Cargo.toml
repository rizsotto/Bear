# SPDX-License-Identifier: GPL-3.0-or-later

[package]
name = "bear"
description = "Bear is a tool that generates a compilation database for clang tooling."
keywords = ["clang", "clang-tooling", "compilation-database"]
version.workspace = true
authors.workspace = true
repository.workspace = true
homepage.workspace = true
license.workspace = true
edition.workspace = true

[lib]
name = "bear"
path = "src/lib.rs"

[[bin]]
name = "bear"
path = "src/bin/main.rs"

[dependencies]
thiserror.workspace = true
anyhow.workspace = true
serde.workspace = true
serde_json.workspace = true
serde_yml.workspace = true
clap.workspace = true
directories.workspace = true
log.workspace = true
env_logger.workspace = true
shell-words.workspace = true
tempfile.workspace = true
signal-hook.workspace = true

[dev-dependencies]
tempfile.workspace = true
anyhow.workspace = true
assert_cmd = "2.0"
assert_fs = "1.1"
predicates = "3.1"

[build-dependencies]
platform-checks = { path = "../platform-checks" }
which = "7.0"



[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = [
    'cfg(has_executable_true)',
    'cfg(has_executable_false)',
    'cfg(has_executable_echo)',
    'cfg(has_executable_sleep)',
    'cfg(has_executable_shell)',
    'cfg(has_executable_make)',
    'cfg(has_executable_compiler_c)',
    'cfg(has_executable_compiler_cxx)',
    'cfg(has_executable_compiler_fortran)',
    'cfg(has_executable_compiler_cuda)',
    'cfg(has_executable_libtool)',
    'cfg(has_executable_fakeroot)',
    'cfg(has_executable_valgrind)',
    'cfg(has_executable_ar)',
    'cfg(has_header_dlfcn_h)',
    'cfg(has_symbol_dlopen)',
    'cfg(has_symbol_dlsym)',
    'cfg(has_symbol_dlerror)',
    'cfg(has_symbol_dlclose)',
    'cfg(has_symbol_RTLD_NEXT)',
    'cfg(has_header_errno_h)',
    'cfg(has_symbol_EACCES)',
    'cfg(has_symbol_ENOENT)',
    'cfg(has_header_unistd_h)',
    'cfg(has_symbol_execve)',
    'cfg(has_symbol_execv)',
    'cfg(has_symbol_execvpe)',
    'cfg(has_symbol_execvp)',
    'cfg(has_symbol_execvP)',
    'cfg(has_symbol_exect)',
    'cfg(has_symbol_execl)',
    'cfg(has_symbol_execlp)',
    'cfg(has_symbol_execle)',
    'cfg(has_symbol_execveat)',
    'cfg(has_symbol_fexecve)',
    'cfg(has_header_spawn_h)',
    'cfg(has_symbol_posix_spawn)',
    'cfg(has_symbol_posix_spawnp)',
    'cfg(has_header_stdio_h)',
    'cfg(has_symbol_popen)',
    'cfg(has_header_stdlib_h)',
    'cfg(has_symbol_system)'
] }