.TH BEAR 1 "February 16, 2016" "Bear User Manuals"
.SH NAME
.PP
bear \- build ear
.SH SYNOPSIS
.PP
bear [\f[I]options\f[]] [\f[I]build commands\f[]]
.SH DESCRIPTION
.PP
Bear is a tool to generate compilation database for clang tooling.
.PP
The JSON compilation
database (http://clang.llvm.org/docs/JSONCompilationDatabase.html) is
used in clang project to provide information how a single compilation
unit was processed.
When that is available then it is easy to re\-run the compilation with
different programs.
.PP
Bear execs the original build command and intercept the \f[C]exec\f[]
calls.
To achieve that Bear uses the \f[C]LD_PRELOAD\f[] or
\f[C]DYLD_INSERT_LIBRARIES\f[] mechanisms provided by the dynamic
linker.
There is a library which defines the \f[C]exec\f[] methods and used in
every child processes of the build command.
The executable itself sets the environment up to child processes and
writes the output file.
.SH OPTIONS
.TP
.B \-o \f[I]output\f[], \-\-cdb \f[I]output\f[]
Specify output file.
Default value provided.
.RS
.RE
.TP
.B \-a, \-\-append
Use previously generated output file and append the new entries to it.
This way you can run bear continuously during work, and it keeps the
compilation database up to date. File deletion and addition are both
considered. But build process change (modifying compiler flags) will
cause duplicate entries.
.RS
.RE
.TP
.B \-v, \-\-verbose
Make bear more verbose.
.RS
.RE
.TP
.B \-l \f[I]library\f[]
Specify the preloaded library location.
Default value provided.
(This option mainly for development purposes.)
.RS
.RE
.TP
.B \-n
Disable filter.
The output is also a \f[I]JSON\f[] formated file. But the result is
not a compilation database. It contains all available information
of the \f[C]exec\f[] calls.
(This option mainly for development purposes.)
.RS
.RE
.SH OUTPUT
.PP
There are two version of output formats.
One is defined by the clang tooling.
This goes like this:
.IP
.nf
\f[C]
[
\ \ {\ "directory":\ "/home/user/llvm/build",
\ \ \ \ "command":\ "clang++\ \-Irelative\ \-c\ \-o\ file.o\ file.cc",
\ \ \ \ "file":\ "file.cc"\ },
\ \ ...
]
\f[]
.fi
.PP
To achieve this bear has to run some filtering and formatting.
Build tools exec many commands during the build process.
Bear has to find was that a compiler call, and what was the source file?
The other output format is generated by the \f[C]\-n\f[] flag. (This output
is not formalized, it's used to debug bear itself.)
.SH EXIT STATUS
.PP
Bear exit status is the exit status of the build command.
Except when bear crashes, then it sets to non zero.
.SH ENVIRONMENT
.TP
.B BEAR_OUTPUT
The place of the temporary files where client shall report \f[C]exec\f[]
calls. Value set by bear, overrides previous value for child processes.
.RS
.RE
.TP
.B LD_PRELOAD
Used by the dynamic loader on Linux, FreeBSD and other UNIX OS.
Value set by bear, overrides previous value for child processes.
.RS
.RE
.TP
.B DYLD_INSERT_LIBRARIES
Used by the dynamic loader on OS X.
Value set by bear, overrides previous value for child processes.
.RS
.RE
.TP
.B DYLD_FORCE_FLAT_NAMESPACE
Used by the dynamic loader on OS X.
Value set by bear, overrides previous value for child processes.
.RS
.RE
.SH FILES
.TP
.B @DEFAULT_PRELOAD_FILE@
bear library to implement \f[C]exec\f[] calls.
.RS
.RE
.SH SEE ALSO
.PP
ld.so(8), exec(3)
.SH BUGS
.PP
Because Bear uses LD_PRELOAD or DYLD_INSERT_LIBRARIES environment variables,
it does not append to it, but overrides it. So builds which are using these
variables might not work. (I don't know any build tool which does that, but
please let me know if you do.)
.PP
Security extension/modes on different operating systems might disable library
preloads. This case Bear behaves normaly, but the result compilation database
will be empty. (Please make sure it's not the case when reporting bugs.)
Notable examples for enabled security modes are: SIP on OS X Captain and
SELinux on Fedora, CentOS, RHEL.
.SH COPYRIGHT
.PP
Copyright (C) 2012-2016 by L치szl칩 Nagy
<https://github.com/rizsotto/Bear>
.SH AUTHORS
L치szl칩 Nagy.
