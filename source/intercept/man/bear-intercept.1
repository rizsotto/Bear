.\" Automatically generated by Pandoc 2.19.2
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "BEAR-INTERCEPT" "1" "Sep 04, 2021" "Bear User Manuals" ""
.hy
.SH NAME
.PP
bear-intercept - intercept command executions in user space.
.SH SYNOPSIS
.PP
bear intercept [\f[I]options\f[R]] -- [\f[I]build command\f[R]]
.SH DESCRIPTION
.PP
The command executes the given build command and generates an output
file which contains all process execution related events has happened
during the build.
.PP
The process execution events are: start, signal, termination.
The output will contain only the child processes.
Depending on the interception mode the output might only contain a
subset of the executed commands.
Interception modes are:
.IP \[bu] 2
\f[I]preload\f[R] uses the \f[V]LD_PRELOAD\f[R] or
\f[V]DYLD_INSERT_LIBRARIES\f[R] mechanisms provided by the dynamic
linker.
The pre-loaded library hijacks the process execution calls, and executes
a supervisor process, which reports the execution.
The method fails when the executable statically linked, or security
protection disables the dynamic linker.
.IP \[bu] 2
\f[I]wrapper\f[R] mode interpose a wrapper program to the build.
The wrapper sends execution report and calls the original program.
The method fails when the build system is not flexible enough for
interposing build tools.
.PP
The reports are collected by the \f[V]intercept\f[R] over a gRPC
interface, and written into an output file.
.SH OPTIONS
.TP
--version
Print version number.
.TP
--help
Print help message.
.TP
--verbose
Enable verbose logging.
.TP
--output \f[I]file\f[R]
Specify output file.
(Default file name provided.)
The output is a command execution list, with some extra information.
The syntax is detailed in a separate section.
.TP
--force-preload
Force to use the preload method to intercept the children processes.
.TP
--force-wrapper
Force to use the wrapper method to intercept the children processes.
.SH EXIT STATUS
.PP
The exit status of the program is the exit status of the build command.
Except when the program itself crashes, then it sets to non zero.
.SH OUTPUT FILE
.PP
The output file has JSON lines (https://jsonlines.org/) format, where
each line terminated with \f[V]\[rs]n\f[R] line separator and each line
is a JSON object.
.PP
The JSON objects are process execution events: process start, process
got signal, process terminated.
(For the schema of these events, please consult with the source code of
this project.)
.SH TROUBLESHOOTING
.PP
The potential problems you can face with are: the build with and without
the interception behaves differently (eg.: the build crash with the
\f[V]intercept\f[R] tool, but succeed otherwise).
The output is empty, and it failed to intercept the children process
execution by the build command.
.PP
The most common cause for empty outputs is that the build command did
not execute any commands.
The reason for that could be, because incremental builds not running the
compilers if everything is up-to-date.
Remember, \f[V]intercept\f[R] does not understand the build file (eg.:
makefile), but intercepts the executed commands.
.PP
There could be many reasons for any of these failures.
It\[cq]s better to consult with the project wiki page for known
problems, before open a bug report.
.SH SEE ALSO
.PP
\f[V]bear(1)\f[R]
.SH COPYRIGHT
.PP
Copyright (C) 2012-2022 by L\['a]szl\['o] Nagy
<https://github.com/rizsotto/Bear>
.SH AUTHORS
L\['a]szl\['o] Nagy.
