[package]
name = "integration-tests"
version.workspace = true
authors.workspace = true
repository.workspace = true
homepage.workspace = true
license.workspace = true
edition.workspace = true
publish = false

[features]
allow-integration-tests = []

[dev-dependencies]
bear = { path = "../bear" }
intercept-preload = { path = "../intercept-preload" }
intercept-wrapper = { path = "../intercept-wrapper" }
tempfile.workspace = true
anyhow.workspace = true
assert_cmd.workspace = true
assert_fs.workspace = true
predicates.workspace = true

[build-dependencies]
platform-checks = { path = "../platform-checks" }
which.workspace = true

[[test]]
name = "integration"
path = "tests/integration.rs"
required-features = ["allow-integration-tests"]
harness = true

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = [
    'cfg(has_executable_true)',
    'cfg(has_executable_false)',
    'cfg(has_executable_echo)',
    'cfg(has_executable_sleep)',
    'cfg(has_executable_shell)',
    'cfg(has_executable_make)',
    'cfg(has_executable_compiler_c)',
    'cfg(has_executable_compiler_cxx)',
    'cfg(has_executable_compiler_fortran)',
    'cfg(has_executable_compiler_cuda)',
    'cfg(has_executable_libtool)',
    'cfg(has_executable_fakeroot)',
    'cfg(has_executable_valgrind)',
    'cfg(has_executable_ar)',
    'cfg(has_header_dlfcn_h)',
    'cfg(has_symbol_dlopen)',
    'cfg(has_symbol_dlsym)',
    'cfg(has_symbol_dlerror)',
    'cfg(has_symbol_dlclose)',
    'cfg(has_symbol_RTLD_NEXT)',
    'cfg(has_header_errno_h)',
    'cfg(has_symbol_EACCES)',
    'cfg(has_symbol_ENOENT)',
    'cfg(has_header_unistd_h)',
    'cfg(has_symbol_execve)',
    'cfg(has_symbol_execv)',
    'cfg(has_symbol_execvpe)',
    'cfg(has_symbol_execvp)',
    'cfg(has_symbol_execvP)',
    'cfg(has_symbol_exect)',
    'cfg(has_symbol_execl)',
    'cfg(has_symbol_execlp)',
    'cfg(has_symbol_execle)',
    'cfg(has_symbol_execveat)',
    'cfg(has_symbol_fexecve)',
    'cfg(has_header_spawn_h)',
    'cfg(has_symbol_posix_spawn)',
    'cfg(has_symbol_posix_spawnp)',
    'cfg(has_header_stdio_h)',
    'cfg(has_symbol_popen)',
    'cfg(has_header_stdlib_h)',
    'cfg(has_symbol_system)'
] }