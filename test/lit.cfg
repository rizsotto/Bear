# -*- coding: utf-8 -*-

import sys
import re
import os.path
import subprocess
import lit.util

this_dir = os.path.dirname(__file__)
project_dir = os.path.dirname(this_dir)

# Input parameters for this test module are:
#
# _BEAR_BIN_DIR   : the directory where the `bear` and `intercept` installed.
#                   (this is necessary only if these files are not in the `PATH`.)
# _TEST_EXEC_ROOT : the test execution root directory (optional)
#
config.name = 'bear'

config.test_format = lit.formats.ShTest()
config.test_source_root = this_dir

if '_TEST_EXEC_ROOT' in lit_config.params:
    config.test_exec_root = lit_config.params['_TEST_EXEC_ROOT']
else:
    import tempfile
    config.test_exec_root = tempfile.mkdtemp(prefix='bear-')

config.suffixes = ['.sh', '.mk', '.c']
config.excludes = []

config.environment['LC_CTYPE'] = 'en_US.UTF-8'
config.environment['PATH'] = ":".join([os.path.join(this_dir, 'bin'), os.environ.get('PATH')])

# add bear install directory in case if it's not in the path
if '_BEAR_BIN_DIR' in lit_config.params:
    bin_dir = lit_config.params['_BEAR_BIN_DIR']
    config.environment['PATH'] = ":".join([bin_dir, config.environment['PATH']])


def static_linked(program):
    try:
        subprocess.call(['ldd', program], stdout=subprocess.PIPE)
    except:
        return True
    else:
        return False


def which(program):
    path = config.environment['PATH']
    result = lit.util.which(program, path)
    if result is not None:
        return os.path.abspath(result)
    else:
        return None


# set up bear parameters
bin_bear = lit_config.params['_BIN_BEAR']
bin_wrapper = lit_config.params['_BIN_WRAPPER']
bin_wrapper_dir = lit_config.params['_BIN_WRAPPER_DIR']
lib_exec = lit_config.params['_LIB_EXEC']

bear_cmd = '{} --bear-path {} --library {} --wrapper {} --wrapper-dir {}'.format(
    bin_bear,
    bin_bear,
    lib_exec,
    bin_wrapper,
    bin_wrapper_dir
)
config.substitutions.append(('%{bear}', bear_cmd))

intercept_cmd = '{} intercept --wrapper {} --library {} --wrapper-dir {}'.format(
    bin_bear,
    bin_wrapper,
    lib_exec,
    bin_wrapper_dir
)

config.substitutions.append(('%{intercept}', intercept_cmd))

citnames_cmd = '{} citnames'.format(
    bin_bear
)

config.substitutions.append(('%{citnames}', citnames_cmd))

# check if a shell is available
shell_path = None
if which('sh'):
    shell_path = which('sh')
elif which('zsh'):
    shell_path = which('zsh')
elif which('bash'):
    shell_path = which('bash')

if shell_path:
    config.substitutions.append(('%{shell}', shell_path))
    config.available_features.add('shell')
    if not static_linked(shell_path):
        config.available_features.add('dynamic-shell')


# check if a make is available
make_path = None
if which('make'):
    make_path = which('make')
elif which('mingw32-make'):
    make_path = which('mingw32-make')

if make_path:
    config.substitutions.append(('%{make}', make_path))
    config.available_features.add('make')
    if not static_linked(make_path):
        config.available_features.add('dynamic-make')


# check if util commands are available
if which('true'):
    path = which('true')
    config.substitutions.append(('%{true}', path))
    config.environment['TRUE'] = path
if which('false'):
    path = which('false')
    config.substitutions.append(('%{false}', path))
    config.environment['FALSE'] = path
if which('echo'):
    path = which('echo')
    config.substitutions.append(('%{echo}', path))
    config.environment['ECHO'] = path
if which('sleep'):
    path = which('sleep')
    config.substitutions.append(('%{sleep}', path))
    config.environment['SLEEP'] = path


# check if C compiler is available
if which('cc'):
    path = which('cc')
    config.substitutions.append(('%{c_compiler}', path))
    config.environment['CC'] = path


# check if C++ compiler is available
if which('c++'):
    path = which('c++')
    config.substitutions.append(('%{cxx_compiler}', path))
    config.environment['CXX'] = path


# check if fortran compiler is available
if which('gfortran'):
    path = which('gfortran')
    config.substitutions.append(('%{fortran}', path))
    config.available_features.add('fortran')


# check if cuda compiler is available
if which('nvcc'):
    path = which('nvcc')
    config.substitutions.append(('%{cuda}', path))
    config.available_features.add('cuda')


# check if libtool command is available
if which('libtool') and sys.platform == 'linux':
    path = which('libtool')
    config.environment['LIBTOOL'] = path
    config.substitutions.append(('%{libtool}', path))
    config.available_features.add('libtool')


# check if fakeroot is available
if which('fakeroot'):
    path = which('fakeroot')
    config.substitutions.append(('%{fakeroot}', path))
    config.available_features.add('fakeroot')


# check if valgrind is available
if which('valgrind'):
    path = which('valgrind')
    config.substitutions.append(('%{valgrind}', path))
    config.available_features.add('valgrind')


# classify os script language
is_windows = sys.platform in {'win32', 'cygwin'}
if is_windows:
    config.available_features.add('batch')
    config.suffixes.append('.bat')
    config.environment['windows'] = 'True'


# check for library preload is available
def is_preload_disabled():
    # type: () -> bool
    """ Library-based interposition will fail silently if SIP is enabled,
    so this should be detected. You can detect whether SIP is enabled on
    Darwin by checking whether (1) there is a binary called 'csrutil' in
    the path and, if so, (2) whether the output of executing 'csrutil status'
    contains 'System Integrity Protection status: enabled'.

    :return: True if library preload will fail by the dynamic linker. """

    if is_windows:
        return True
    elif sys.platform == 'darwin':
        command = ['csrutil', 'status']
        pattern = re.compile(r'System Integrity Protection status:\s+enabled')
        try:
            output = subprocess.check_output(command, stderr=subprocess.STDOUT)
            return any(pattern.match(line) for line in output.decode('utf-8').splitlines())
        except (OSError, subprocess.CalledProcessError):
            return False
    else:
        return False


if not is_preload_disabled():
    config.available_features.add('preload')

print(config.substitutions)
print(config.environment)
print(config.available_features)
